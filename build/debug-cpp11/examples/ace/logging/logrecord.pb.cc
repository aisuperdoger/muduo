// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#include "logrecord.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace logging {
PROTOBUF_CONSTEXPR LogRecord_Heartbeat::LogRecord_Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_start_time_)*/int64_t{0}
  , /*decltype(_impl_.process_id_)*/0} {}
struct LogRecord_HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRecord_HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRecord_HeartbeatDefaultTypeInternal() {}
  union {
    LogRecord_Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRecord_HeartbeatDefaultTypeInternal _LogRecord_Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR LogRecord::LogRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.heartbeat_)*/nullptr
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.thread_id_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct LogRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRecordDefaultTypeInternal() {}
  union {
    LogRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRecordDefaultTypeInternal _LogRecord_default_instance_;
}  // namespace logging
static ::_pb::Metadata file_level_metadata_logrecord_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_logrecord_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_logrecord_2eproto = nullptr;

const uint32_t TableStruct_logrecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _impl_.process_name_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _impl_.process_id_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _impl_.process_start_time_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord_Heartbeat, _impl_.username_),
  0,
  1,
  4,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _impl_.heartbeat_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _impl_.thread_id_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::logging::LogRecord, _impl_.message_),
  1,
  2,
  3,
  4,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::logging::LogRecord_Heartbeat)},
  { 18, 31, -1, sizeof(::logging::LogRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::logging::_LogRecord_Heartbeat_default_instance_._instance,
  &::logging::_LogRecord_default_instance_._instance,
};

const char descriptor_table_protodef_logrecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017logrecord.proto\022\007logging\"\371\001\n\tLogRecord"
  "\022/\n\theartbeat\030\001 \001(\0132\034.logging.LogRecord."
  "Heartbeat\022\r\n\005level\030\002 \002(\005\022\021\n\tthread_id\030\003 "
  "\002(\005\022\021\n\ttimestamp\030\004 \002(\003\022\017\n\007message\030\005 \002(\t\032"
  "u\n\tHeartbeat\022\020\n\010hostname\030\001 \002(\t\022\024\n\014proces"
  "s_name\030\002 \002(\t\022\022\n\nprocess_id\030\003 \002(\005\022\032\n\022proc"
  "ess_start_time\030\004 \002(\003\022\020\n\010username\030\005 \002(\t"
  ;
static ::_pbi::once_flag descriptor_table_logrecord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_logrecord_2eproto = {
    false, false, 278, descriptor_table_protodef_logrecord_2eproto,
    "logrecord.proto",
    &descriptor_table_logrecord_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_logrecord_2eproto::offsets,
    file_level_metadata_logrecord_2eproto, file_level_enum_descriptors_logrecord_2eproto,
    file_level_service_descriptors_logrecord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_logrecord_2eproto_getter() {
  return &descriptor_table_logrecord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_logrecord_2eproto(&descriptor_table_logrecord_2eproto);
namespace logging {

// ===================================================================

class LogRecord_Heartbeat::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRecord_Heartbeat>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogRecord_Heartbeat, _impl_._has_bits_);
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_process_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

LogRecord_Heartbeat::LogRecord_Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:logging.LogRecord.Heartbeat)
}
LogRecord_Heartbeat::LogRecord_Heartbeat(const LogRecord_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogRecord_Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.process_name_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.process_start_time_){}
    , decltype(_impl_.process_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_process_name()) {
    _this->_impl_.process_name_.Set(from._internal_process_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.process_start_time_, &from._impl_.process_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.process_id_) -
    reinterpret_cast<char*>(&_impl_.process_start_time_)) + sizeof(_impl_.process_id_));
  // @@protoc_insertion_point(copy_constructor:logging.LogRecord.Heartbeat)
}

inline void LogRecord_Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.process_name_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.process_start_time_){int64_t{0}}
    , decltype(_impl_.process_id_){0}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogRecord_Heartbeat::~LogRecord_Heartbeat() {
  // @@protoc_insertion_point(destructor:logging.LogRecord.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogRecord_Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostname_.Destroy();
  _impl_.process_name_.Destroy();
  _impl_.username_.Destroy();
}

void LogRecord_Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogRecord_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:logging.LogRecord.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.process_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.process_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.process_id_) -
        reinterpret_cast<char*>(&_impl_.process_start_time_)) + sizeof(_impl_.process_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRecord_Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "logging.LogRecord.Heartbeat.hostname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "logging.LogRecord.Heartbeat.process_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 process_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_process_id(&has_bits);
          _impl_.process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 process_start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_process_start_time(&has_bits);
          _impl_.process_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "logging.LogRecord.Heartbeat.username");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRecord_Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logging.LogRecord.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // required string process_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // required int32 process_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_process_id(), target);
  }

  // required int64 process_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_process_start_time(), target);
  }

  // required string username = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.username");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logging.LogRecord.Heartbeat)
  return target;
}

size_t LogRecord_Heartbeat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logging.LogRecord.Heartbeat)
  size_t total_size = 0;

  if (_internal_has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  if (_internal_has_process_name()) {
    // required string process_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  if (_internal_has_username()) {
    // required string username = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (_internal_has_process_start_time()) {
    // required int64 process_start_time = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_process_start_time());
  }

  if (_internal_has_process_id()) {
    // required int32 process_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_id());
  }

  return total_size;
}
size_t LogRecord_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logging.LogRecord.Heartbeat)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());

    // required string process_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());

    // required string username = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());

    // required int64 process_start_time = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_process_start_time());

    // required int32 process_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRecord_Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogRecord_Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRecord_Heartbeat::GetClassData() const { return &_class_data_; }


void LogRecord_Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogRecord_Heartbeat*>(&to_msg);
  auto& from = static_cast<const LogRecord_Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:logging.LogRecord.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_process_name(from._internal_process_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.process_start_time_ = from._impl_.process_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.process_id_ = from._impl_.process_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRecord_Heartbeat::CopyFrom(const LogRecord_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logging.LogRecord.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord_Heartbeat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LogRecord_Heartbeat::InternalSwap(LogRecord_Heartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_name_, lhs_arena,
      &other->_impl_.process_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRecord_Heartbeat, _impl_.process_id_)
      + sizeof(LogRecord_Heartbeat::_impl_.process_id_)
      - PROTOBUF_FIELD_OFFSET(LogRecord_Heartbeat, _impl_.process_start_time_)>(
          reinterpret_cast<char*>(&_impl_.process_start_time_),
          reinterpret_cast<char*>(&other->_impl_.process_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRecord_Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_logrecord_2eproto_getter, &descriptor_table_logrecord_2eproto_once,
      file_level_metadata_logrecord_2eproto[0]);
}

// ===================================================================

class LogRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRecord>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogRecord, _impl_._has_bits_);
  static const ::logging::LogRecord_Heartbeat& heartbeat(const LogRecord* msg);
  static void set_has_heartbeat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

const ::logging::LogRecord_Heartbeat&
LogRecord::_Internal::heartbeat(const LogRecord* msg) {
  return *msg->_impl_.heartbeat_;
}
LogRecord::LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:logging.LogRecord)
}
LogRecord::LogRecord(const LogRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.heartbeat_){nullptr}
    , decltype(_impl_.level_){}
    , decltype(_impl_.thread_id_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_heartbeat()) {
    _this->_impl_.heartbeat_ = new ::logging::LogRecord_Heartbeat(*from._impl_.heartbeat_);
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:logging.LogRecord)
}

inline void LogRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.heartbeat_){nullptr}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.thread_id_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:logging.LogRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.heartbeat_;
}

void LogRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:logging.LogRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.heartbeat_ != nullptr);
      _impl_.heartbeat_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .logging.LogRecord.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 thread_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_thread_id(&has_bits);
          _impl_.thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "logging.LogRecord.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logging.LogRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // required int32 thread_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_thread_id(), target);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logging.LogRecord)
  return target;
}

size_t LogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logging.LogRecord)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_level()) {
    // required int32 level = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_thread_id()) {
    // required int32 thread_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thread_id());
  }

  if (_internal_has_timestamp()) {
    // required int64 timestamp = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return total_size;
}
size_t LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logging.LogRecord)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string message = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required int32 level = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());

    // required int32 thread_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thread_id());

    // required int64 timestamp = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.heartbeat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRecord::GetClassData() const { return &_class_data_; }


void LogRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogRecord*>(&to_msg);
  auto& from = static_cast<const LogRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:logging.LogRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_heartbeat()->::logging::LogRecord_Heartbeat::MergeFrom(
          from._internal_heartbeat());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.thread_id_ = from._impl_.thread_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logging.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_heartbeat()) {
    if (!_impl_.heartbeat_->IsInitialized()) return false;
  }
  return true;
}

void LogRecord::InternalSwap(LogRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.timestamp_)
      + sizeof(LogRecord::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.heartbeat_)>(
          reinterpret_cast<char*>(&_impl_.heartbeat_),
          reinterpret_cast<char*>(&other->_impl_.heartbeat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_logrecord_2eproto_getter, &descriptor_table_logrecord_2eproto_once,
      file_level_metadata_logrecord_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace logging
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logging::LogRecord_Heartbeat*
Arena::CreateMaybeMessage< ::logging::LogRecord_Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logging::LogRecord_Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::logging::LogRecord*
Arena::CreateMaybeMessage< ::logging::LogRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logging::LogRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
