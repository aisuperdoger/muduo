// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logrecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logrecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logrecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logrecord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logrecord_2eproto;
namespace logging {
class LogRecord;
struct LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
class LogRecord_Heartbeat;
struct LogRecord_HeartbeatDefaultTypeInternal;
extern LogRecord_HeartbeatDefaultTypeInternal _LogRecord_Heartbeat_default_instance_;
}  // namespace logging
PROTOBUF_NAMESPACE_OPEN
template<> ::logging::LogRecord* Arena::CreateMaybeMessage<::logging::LogRecord>(Arena*);
template<> ::logging::LogRecord_Heartbeat* Arena::CreateMaybeMessage<::logging::LogRecord_Heartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace logging {

// ===================================================================

class LogRecord_Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logging.LogRecord.Heartbeat) */ {
 public:
  inline LogRecord_Heartbeat() : LogRecord_Heartbeat(nullptr) {}
  ~LogRecord_Heartbeat() override;
  explicit PROTOBUF_CONSTEXPR LogRecord_Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRecord_Heartbeat(const LogRecord_Heartbeat& from);
  LogRecord_Heartbeat(LogRecord_Heartbeat&& from) noexcept
    : LogRecord_Heartbeat() {
    *this = ::std::move(from);
  }

  inline LogRecord_Heartbeat& operator=(const LogRecord_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord_Heartbeat& operator=(LogRecord_Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRecord_Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRecord_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const LogRecord_Heartbeat*>(
               &_LogRecord_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogRecord_Heartbeat& a, LogRecord_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRecord_Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord_Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRecord_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogRecord_Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRecord_Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogRecord_Heartbeat& from) {
    LogRecord_Heartbeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord_Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logging.LogRecord.Heartbeat";
  }
  protected:
  explicit LogRecord_Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kProcessNameFieldNumber = 2,
    kUsernameFieldNumber = 5,
    kProcessStartTimeFieldNumber = 4,
    kProcessIdFieldNumber = 3,
  };
  // required string hostname = 1;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // required string process_name = 2;
  bool has_process_name() const;
  private:
  bool _internal_has_process_name() const;
  public:
  void clear_process_name();
  const std::string& process_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_name();
  PROTOBUF_NODISCARD std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // required string username = 5;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required int64 process_start_time = 4;
  bool has_process_start_time() const;
  private:
  bool _internal_has_process_start_time() const;
  public:
  void clear_process_start_time();
  int64_t process_start_time() const;
  void set_process_start_time(int64_t value);
  private:
  int64_t _internal_process_start_time() const;
  void _internal_set_process_start_time(int64_t value);
  public:

  // required int32 process_id = 3;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  int32_t process_id() const;
  void set_process_id(int32_t value);
  private:
  int32_t _internal_process_id() const;
  void _internal_set_process_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:logging.LogRecord.Heartbeat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int64_t process_start_time_;
    int32_t process_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_logrecord_2eproto;
};
// -------------------------------------------------------------------

class LogRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logging.LogRecord) */ {
 public:
  inline LogRecord() : LogRecord(nullptr) {}
  ~LogRecord() override;
  explicit PROTOBUF_CONSTEXPR LogRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRecord(const LogRecord& from);
  LogRecord(LogRecord&& from) noexcept
    : LogRecord() {
    *this = ::std::move(from);
  }

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
               &_LogRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogRecord& a, LogRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogRecord& from) {
    LogRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logging.LogRecord";
  }
  protected:
  explicit LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogRecord_Heartbeat Heartbeat;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 5,
    kHeartbeatFieldNumber = 1,
    kLevelFieldNumber = 2,
    kThreadIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // required string message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::logging::LogRecord_Heartbeat& heartbeat() const;
  PROTOBUF_NODISCARD ::logging::LogRecord_Heartbeat* release_heartbeat();
  ::logging::LogRecord_Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat);
  private:
  const ::logging::LogRecord_Heartbeat& _internal_heartbeat() const;
  ::logging::LogRecord_Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::logging::LogRecord_Heartbeat* heartbeat);
  ::logging::LogRecord_Heartbeat* unsafe_arena_release_heartbeat();

  // required int32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // required int32 thread_id = 3;
  bool has_thread_id() const;
  private:
  bool _internal_has_thread_id() const;
  public:
  void clear_thread_id();
  int32_t thread_id() const;
  void set_thread_id(int32_t value);
  private:
  int32_t _internal_thread_id() const;
  void _internal_set_thread_id(int32_t value);
  public:

  // required int64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:logging.LogRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::logging::LogRecord_Heartbeat* heartbeat_;
    int32_t level_;
    int32_t thread_id_;
    int64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_logrecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogRecord_Heartbeat

// required string hostname = 1;
inline bool LogRecord_Heartbeat::_internal_has_hostname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_hostname() const {
  return _internal_has_hostname();
}
inline void LogRecord_Heartbeat::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogRecord_Heartbeat::hostname() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord_Heartbeat::set_hostname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.hostname)
}
inline std::string* LogRecord_Heartbeat::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.hostname)
  return _s;
}
inline const std::string& LogRecord_Heartbeat::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void LogRecord_Heartbeat::_internal_set_hostname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord_Heartbeat::_internal_mutable_hostname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord_Heartbeat::release_hostname() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hostname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord_Heartbeat::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.hostname)
}

// required string process_name = 2;
inline bool LogRecord_Heartbeat::_internal_has_process_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_process_name() const {
  return _internal_has_process_name();
}
inline void LogRecord_Heartbeat::clear_process_name() {
  _impl_.process_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogRecord_Heartbeat::process_name() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_name)
  return _internal_process_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord_Heartbeat::set_process_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.process_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_name)
}
inline std::string* LogRecord_Heartbeat::mutable_process_name() {
  std::string* _s = _internal_mutable_process_name();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.process_name)
  return _s;
}
inline const std::string& LogRecord_Heartbeat::_internal_process_name() const {
  return _impl_.process_name_.Get();
}
inline void LogRecord_Heartbeat::_internal_set_process_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.process_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord_Heartbeat::_internal_mutable_process_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.process_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord_Heartbeat::release_process_name() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.process_name)
  if (!_internal_has_process_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.process_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.process_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord_Heartbeat::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.process_name_.SetAllocated(process_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_name_.IsDefault()) {
    _impl_.process_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.process_name)
}

// required int32 process_id = 3;
inline bool LogRecord_Heartbeat::_internal_has_process_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_process_id() const {
  return _internal_has_process_id();
}
inline void LogRecord_Heartbeat::clear_process_id() {
  _impl_.process_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t LogRecord_Heartbeat::_internal_process_id() const {
  return _impl_.process_id_;
}
inline int32_t LogRecord_Heartbeat::process_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_id)
  return _internal_process_id();
}
inline void LogRecord_Heartbeat::_internal_set_process_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.process_id_ = value;
}
inline void LogRecord_Heartbeat::set_process_id(int32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_id)
}

// required int64 process_start_time = 4;
inline bool LogRecord_Heartbeat::_internal_has_process_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_process_start_time() const {
  return _internal_has_process_start_time();
}
inline void LogRecord_Heartbeat::clear_process_start_time() {
  _impl_.process_start_time_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t LogRecord_Heartbeat::_internal_process_start_time() const {
  return _impl_.process_start_time_;
}
inline int64_t LogRecord_Heartbeat::process_start_time() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_start_time)
  return _internal_process_start_time();
}
inline void LogRecord_Heartbeat::_internal_set_process_start_time(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.process_start_time_ = value;
}
inline void LogRecord_Heartbeat::set_process_start_time(int64_t value) {
  _internal_set_process_start_time(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_start_time)
}

// required string username = 5;
inline bool LogRecord_Heartbeat::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_username() const {
  return _internal_has_username();
}
inline void LogRecord_Heartbeat::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogRecord_Heartbeat::username() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord_Heartbeat::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.username)
}
inline std::string* LogRecord_Heartbeat::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.username)
  return _s;
}
inline const std::string& LogRecord_Heartbeat::_internal_username() const {
  return _impl_.username_.Get();
}
inline void LogRecord_Heartbeat::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord_Heartbeat::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord_Heartbeat::release_username() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord_Heartbeat::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.username)
}

// -------------------------------------------------------------------

// LogRecord

// optional .logging.LogRecord.Heartbeat heartbeat = 1;
inline bool LogRecord::_internal_has_heartbeat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heartbeat_ != nullptr);
  return value;
}
inline bool LogRecord::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void LogRecord::clear_heartbeat() {
  if (_impl_.heartbeat_ != nullptr) _impl_.heartbeat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::logging::LogRecord_Heartbeat& LogRecord::_internal_heartbeat() const {
  const ::logging::LogRecord_Heartbeat* p = _impl_.heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::logging::LogRecord_Heartbeat&>(
      ::logging::_LogRecord_Heartbeat_default_instance_);
}
inline const ::logging::LogRecord_Heartbeat& LogRecord::heartbeat() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.heartbeat)
  return _internal_heartbeat();
}
inline void LogRecord::unsafe_arena_set_allocated_heartbeat(
    ::logging::LogRecord_Heartbeat* heartbeat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heartbeat_);
  }
  _impl_.heartbeat_ = heartbeat;
  if (heartbeat) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logging.LogRecord.heartbeat)
}
inline ::logging::LogRecord_Heartbeat* LogRecord::release_heartbeat() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::logging::LogRecord_Heartbeat* temp = _impl_.heartbeat_;
  _impl_.heartbeat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.heartbeat)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::logging::LogRecord_Heartbeat* temp = _impl_.heartbeat_;
  _impl_.heartbeat_ = nullptr;
  return temp;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::_internal_mutable_heartbeat() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::logging::LogRecord_Heartbeat>(GetArenaForAllocation());
    _impl_.heartbeat_ = p;
  }
  return _impl_.heartbeat_;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::mutable_heartbeat() {
  ::logging::LogRecord_Heartbeat* _msg = _internal_mutable_heartbeat();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.heartbeat)
  return _msg;
}
inline void LogRecord::set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.heartbeat_;
  }
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.heartbeat)
}

// required int32 level = 2;
inline bool LogRecord::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogRecord::has_level() const {
  return _internal_has_level();
}
inline void LogRecord::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t LogRecord::_internal_level() const {
  return _impl_.level_;
}
inline int32_t LogRecord::level() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.level)
  return _internal_level();
}
inline void LogRecord::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void LogRecord::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.level)
}

// required int32 thread_id = 3;
inline bool LogRecord::_internal_has_thread_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogRecord::has_thread_id() const {
  return _internal_has_thread_id();
}
inline void LogRecord::clear_thread_id() {
  _impl_.thread_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t LogRecord::_internal_thread_id() const {
  return _impl_.thread_id_;
}
inline int32_t LogRecord::thread_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.thread_id)
  return _internal_thread_id();
}
inline void LogRecord::_internal_set_thread_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.thread_id_ = value;
}
inline void LogRecord::set_thread_id(int32_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.thread_id)
}

// required int64 timestamp = 4;
inline bool LogRecord::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogRecord::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void LogRecord::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t LogRecord::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t LogRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.timestamp)
  return _internal_timestamp();
}
inline void LogRecord::_internal_set_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.timestamp_ = value;
}
inline void LogRecord::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.timestamp)
}

// required string message = 5;
inline bool LogRecord::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRecord::has_message() const {
  return _internal_has_message();
}
inline void LogRecord::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogRecord::message() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:logging.LogRecord.message)
}
inline std::string* LogRecord::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.message)
  return _s;
}
inline const std::string& LogRecord::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LogRecord::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_message() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogRecord::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logrecord_2eproto
